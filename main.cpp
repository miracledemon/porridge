#include <iostream> #include <cstdio> #include <cstring> #include <vector> #include <cstdlib> #include <cmath> #include <conio.h> #pragma warning(disable:4996) using namespace std; struct stack { 	double real; 	double image; 	char symbol; 	bool symbol_judge; }; struct file { 	char input[51]; 	char output[51]; }; bool Judgement(char *p); void erroroutput(char *p, int error, int errortype); void Handlemessage(char *p); stack RPN(char *p); stack Addplural(stack a, stack b); stack Subplural(stack a, stack b); stack Mulplural(stack a, stack b); stack Divplural(stack a, stack b); void PluralRPN(char *p); void CjgRPN(char *p); void PowRPN(char *p, int times); void ArgRPN(char *p); void Showresult(char *p, stack a); int main() { 	int alldata = 0; 	char inputorder[201]; 	char outputresult[201]; 	cout << '&'; 	cin >> inputorder; 	if (strcmp(inputorder, "myCalculator") == 0) 	{ 		vector<file> store; 		char operate; 		cout << "Press calculator to calculator" << endl; 		cout << "Press review to review" << endl; 		cout << "Press quit to quit" << endl; 		cout << "Please input you order:" << endl; 		while (true) 		{ 			cin >> inputorder; 			if (strcmp(inputorder, "calculator") == 0) 			{ 				while (strcmp(inputorder, "quit") != 0) 				{ 					cout << "Press quit to quit" << endl; 					cout << "Please input you calculator:" << endl; 					cin >> inputorder; 					if (Judgement(inputorder)) 					{ 						Handlemessage(inputorder); 						stack a = RPN(inputorder); 						Showresult(outputresult, a); 						file b; 						strcpy(b.input, inputorder); 						strcpy(b.output, outputresult); 						store.push_back(b); 					} 				} 			} 			else if (strcmp(inputorder, "review") == 0) 			{ 				cout << "Press up and down to review" << endl; 				cout << "Press left to quit" << endl; 				alldata = store.size() - 1; 				while (true) 				{ 					operate = getch(); 					if (operate == -32) 					{ 						operate = getch(); 						if (operate == 72) 						{ 							alldata--; 							if (alldata < 0) 							{ 								cout << "have become the head" << endl; 								alldata++; 							} 							else 							{ 								cout << store[alldata].input << endl; 								cout << store[alldata].output << endl; 							} 						} 						else if (operate == 80) 						{ 							alldata++; 							if (alldata >= store.size()) 							{ 								cout << "have become the tail" << endl; 								alldata--; 							} 							else 							{ 								cout << store[alldata].input << endl; 								cout << store[alldata].output << endl; 							} 						} 						else if (operate == 75) 							break; 						else 							cout << "wrong input" << endl; 					} 				} 			} 			else if (strcmp(inputorder, "quit") == 0) 				break; 			else 				cout << "wront input" << endl; 		} 	} 	return 0; } void erroroutput(char *p, int error, int errortype) { 	if (errortype == 1)//type=1,靠靠靠靠 	{ 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (error != i && error - 1 != i) 				cout << p[i]; 			else 				printf("\033[31m%c\033[0m", p[i]); 		} 		cout << "	靠靠靠靠靠" << endl; 	} 	else if (errortype == 2)//type=2,靠靠靠 	{ 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (i != 0) 				cout << p[i]; 			else 				printf("\033[31m%c\033[0m", p[i]); 		} 		cout << "       靠靠靠" << endl; 	} 	else if (errortype == 3)//type=3,靠靠靠 	{ 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (p[i + 1] != '\0') 				cout << p[i]; 			else 				printf("\033[31m%c\033[0m", p[i]); 		} 		cout << "	靠靠靠" << endl; 	} 	if (errortype == 4)//type=4,靠靠靠靠 	{ 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (error != i && error - 1 != i) 				cout << p[i]; 			else 				printf("\033[31m%c\033[0m", p[i]); 		} 		cout << "	靠靠靠靠" << endl; 	} 	if (errortype == 5)//type=5,i靠靠靠靠 	{ 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (error != i && error + 1 != i) 				cout << p[i]; 			else 				printf("\033[31m%c\033[0m", p[i]); 		} 		cout << "	i靠靠靠靠" << endl; 	} 	if (errortype == 6)//type=6,i靠靠靠靠 	{ 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (error != i && error - 1 != i) 				cout << p[i]; 			else 				printf("\033[31m%c\033[0m", p[i]); 		} 		cout << "	i靠靠靠靠" << endl; 	} 	if (errortype == 7)//type=7,靠靠靠靠 	{ 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (error != i && error - 1 != i) 				cout << p[i]; 			else 				printf("\033[31m%c\033[0m", p[i]); 		} 		cout << "	靠靠靠? << endl; 	} 	if (errortype == 8)//type=8,)靠靠靠? 	{ 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (error != i && error - 1 != i) 				cout << p[i]; 			else 				printf("\033[31m%c\033[0m", p[i]); 		} 		cout << "	)靠靠靠? << endl; 	} 	if (errortype == 9)//type=9,靠靠? 	{ 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (error != i) 				cout << p[i]; 			else 				printf("\033[31m%c\033[0m", p[i]); 		} 		cout << "	靠靠? << endl; 	} 	if (errortype == 10)//type=10,靠靠? 	{ 		cout << "靠靠? << endl; 	} 	if (errortype == 11)//type=11,||靠? 	{ 		cout << "||靠? << endl; 	} } bool Judgement(char *p) { 	int bracket = 0, error = -1, errortype = -1, modular = 0; 	bool errorlist[52]; 	for (int i = 0; i < 52; i++) 		errorlist[i] = 1; 	for (int i = 0; p[i] != '\0'; i++) 	{ 		if (p[i] == '(') 			bracket++; 		else if (p[i] == ')') 			bracket--; 		if (bracket < 0) 		{ 			error = i; 			errortype = 9; 			erroroutput(p, error, errortype); 			break; 		} 		else if (p[i + 1] == '\0'&&bracket != 0) 		{ 			error = -2; 			errortype = 10; 			erroroutput(p, error, errortype); 		} 	} 	for (int i = 0; p[i] != '\0'; i++) 	{ 		if (p[i] == '|') 			modular++; 	} 	if (modular % 2 == 1) 	{ 		error = -2; 		errortype = 11; 		erroroutput(p, error, errortype); 	} 	if (modular % 2 == 0 && bracket == 0) 	{ 		if (p[0] != '|'&&p[0] != '-'&& p[0] != 'i'&& p[0] != 'a'&& p[0] != 'c' && p[0] != '(' && (p[0] > '9' || p[0] < '0')) 		{ 			error = 0; 			errortype = 2; 			errorlist[0] = 0; 			erroroutput(p, error, errortype); 		} 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (p[i + 1] == '\0' && (p[i] != '|'&&p[i] != 'i'&&p[i] != ')' && (p[i] > '9' || p[i] < '0'))) 			{ 				error = i; 				errortype = 3; 				errorlist[i] = 0; 				erroroutput(p, error, errortype); 			} 		} 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (p[i] == '+' || p[i] == '-' || p[i] == '*' || p[i] == '/'&&errorlist[i]) 			{ 				if ((p[i + 1] == ')' || p[i + 1] == '+' || p[i + 1] == '-' || p[i + 1] == '*' || p[i + 1] == '/') && errorlist[i + 1]) 				{ 					error = i + 1; 					errorlist[i + 1] = 0; 					errortype = 1; 					erroroutput(p, error, errortype); 				} 			} 			else if (p[i] <= '9'&&p[i] >= '0'&&errorlist[i]) 			{ 				if (p[i + 1] != ')'&&p[i + 1] != 'i'&&p[i + 1] != '+'&&p[i + 1] != '-'&&p[i + 1] != '*'&&p[i + 1] != '/'&&p[i + 1] != '|'&&errorlist[i + 1]) 				{ 					error = i + 1; 					errorlist[i + 1] = 0; 					errortype = 4; 					erroroutput(p, error, errortype); 				} 				if (p[i + 1] == '|') 				{ 					int number = 0; 					for (int j = i + 1; j >= 0; j--) 						if (p[j] == '|') 							number++; 					if (number % 2 == 1) 					{ 						error = i + 1; 						errorlist[i + 1] = 0; 						errortype = 4; 						erroroutput(p, error, errortype); 					} 					else 					{ 						bool begin = 0; 						for (int j = i; p[j] != '|'; j--) 							if (p[j] == 'i') 								begin = 1; 						if (!begin) 						{ 							error = i + 1; 							errorlist[i + 1] = 0; 							errortype = 4; 							erroroutput(p, error, errortype); 						} 					}  				} 			} 			else if (p[i] == 'i'&&errorlist[i]) 			{ 				if (i > 0 && p[i - 1] != '|'&&p[i - 1] != '+'&&p[i - 1] != '-'&&p[i - 1] != '*'&&p[i - 1] != '/'&&p[i - 1] != ')' && (p[i - 1] > '9' || p[i - 1] < '0') && errorlist[i - 1]) 				{ 					error = i - 1; 					errorlist[i - 1] = 0; 					errortype = 5; 					erroroutput(p, error, errortype); 				} 				if (p[i + 1] != '\0' && p[i + 1] != '|'&&p[i + 1] != '+'&&p[i + 1] != '-'&&p[i + 1] != '*'&&p[i + 1] != '/'&&p[i + 1] != '(' && errorlist[i + 1]) 				{ 					error = i + 1; 					errorlist[i + 1] = 0; 					errortype = 6; 					erroroutput(p, error, errortype); 				} 				if (p[i + 1] != '\0' && p[i + 1] == '|') 				{ 					int number = 0; 					for (int j = i + 1; j >= 0; j--) 						if (p[j] == '|') 							number++; 					if (number % 2 == 1) 					{ 						error = i + 1; 						errorlist[i + 1] = 0; 						errortype = 6; 						erroroutput(p, error, errortype); 					} 				} 			} 			else if (p[i] == '(' && (p[i + 1] == ')' || p[i + 1] == '+' || p[i + 1] == '-' || p[i + 1] == '*') && errorlist[i + 1]) 			{ 				error = i + 1; 				errortype = 7; 				errorlist[i + 1] = 0; 				erroroutput(p, error, errortype); 			} 			else if (p[i] == ')' && (p[i + 1] == '(' || p[i + 1] == 'i' || (p[i + 1] <= '9'&&p[i + 1] >= '0') || p[i + 1] == '|') && errorlist[i + 1]) 			{ 				error = i + 1; 				errortype = 8; 				errorlist[i + 1] = 0; 				erroroutput(p, error, errortype); 			} 		} 	} 	if (error == -1) 		return 1; 	else 		return 0;  } void Handlemessage(char *p) { 	bool argbegin = 0, cjgbegin = 0, pluralbegin = 0; 	char pownumber[5]; 	int bracket = 0; 	int head, tail; 	char dealorder[51]; 	char tailchar[51]; 	dealorder[0] == '\0'; 	tailchar[0] == '\0'; 	while (strstr(p, "arg") != NULL) 	{ 		argbegin = 0; 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (p[i] == 'a') 				argbegin = 1; 			if (p[i] == 'g'&&argbegin) 			{ 				for (int j = i; p[j] != '\0'; j++) 				{ 					if (p[j] == '(') 					{ 						head = j; 						bracket++; 					} 					if (p[j] == ')') 					{ 						bracket--; 						if (bracket == 0) 						{ 							tail = j; 							break; 						} 					} 				} 				break; 			} 		} 		for (int i = 1; i < tail - head; i++) 		{ 			dealorder[i - 1] = p[i + head]; 			dealorder[i] = '\0'; 		} 		for (int i = tail + 1; p[i] != '\0'; i++) 		{ 			tailchar[i - tail - 1] = p[i]; 			tailchar[i - tail] = '\0'; 		} 		p[head - 3] = '\0'; 		ArgRPN(dealorder); 		strcat(p, dealorder); 		strcat(p, tailchar); 	} 	while (strstr(p, "cjg") != NULL) 	{ 		cjgbegin = 0; 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (p[i] == 'c') 				cjgbegin = 1; 			if (p[i] == 'g'&&cjgbegin) 			{ 				for (int j = i; p[j] != '\0'; j++) 				{ 					if (p[j] == '(') 					{ 						head = j; 						bracket++; 					} 					if (p[j] == ')') 					{ 						bracket--; 						if (bracket == 0) 						{ 							tail = j; 							break; 						} 					} 				} 				break; 			} 		} 		for (int i = 1; i < tail - head; i++) 		{ 			dealorder[i - 1] = p[i + head]; 			dealorder[i] = '\0'; 		} 		for (int i = tail + 1; p[i] != '\0'; i++) 		{ 			tailchar[i - tail - 1] = p[i]; 			tailchar[i - tail] = '\0'; 		} 		p[head - 3] = '\0'; 		CjgRPN(dealorder); 		strcat(p, dealorder); 		strcat(p, tailchar); 	} 	while (strstr(p, "|") != NULL) 	{ 		pluralbegin = 0; 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (p[i] == '|' && !pluralbegin) 			{ 				head = i; 				pluralbegin = 1; 			} 			else if (p[i] == '|'&&pluralbegin) 			{ 				tail = i; 				break; 			} 		} 		for (int i = 1; i < tail - head; i++) 		{ 			dealorder[i - 1] = p[i + head]; 			dealorder[i] = '\0'; 		} 		for (int i = tail + 1; p[i] != '\0'; i++) 		{ 			tailchar[i - tail - 1] = p[i]; 			tailchar[i - tail] = '\0'; 		} 		p[head] = '\0'; 		PluralRPN(dealorder); 		strcat(p, dealorder); 		strcat(p, tailchar); 	} 	while (strstr(p, "^") != NULL) 	{ 		int powernumber; 		for (int i = 0; p[i] != '\0'; i++) 		{ 			if (p[i] == '^') 			{ 				tail = i - 1; 				for (int j = i; j >= 0; j--) 				{ 					if (p[j] == ')') 					{ 						bracket--; 					} 					else if (p[j] == '(') 					{ 						bracket++; 						if (bracket == 0) 						{ 							head = j; 							break; 						}  					} 				} 				for (int j = i + 1; p[j] >= '0'&&p[j] <= '9'; j++) 				{ 					pownumber[j - i - 1] = p[j]; 					pownumber[j - 1] = '\0'; 				} 				powernumber = atoi(pownumber); 				break; 			}  		} 		for (int i = 1; i < tail - head; i++) 		{ 			dealorder[i - 1] = p[i + head]; 			dealorder[i] = '\0'; 		} 		for (int i = tail + 2 + strlen(pownumber); p[i] != '\0'; i++) 		{ 			tailchar[i - tail - 2 - strlen(pownumber)] = p[i]; 			tailchar[i - tail - 1 - strlen(pownumber)] = '\0'; 		} 		p[head] = '\0'; 		PowRPN(dealorder, powernumber); 		strcat(p, dealorder); 		strcat(p, tailchar); 	} } stack RPN(char *p) { 	vector<stack> s1; 	vector<stack> s2; 	char number[21]; 	for (int i = 0; i==0||p[i - 1] != '\0'; i++) 	{ 		if (p[i] >= '0'&&p[i] <= '9') 		{ 			for (int j = i; (p[j] >= '0'&&p[j] <= '9') || p[j] == '.'; j++) 			{ 				number[j - i] = p[j]; 				number[j - i + 1] = '\0'; 			} 			stack item; 			item.real = atof(number); 			item.image = 0; 			item.symbol_judge = 0; 			s2.push_back(item); 			i = i + strlen(number) - 1; 		} 		else if (p[i] == '+') 		{ 			stack item; 			item.symbol = '+'; 			item.symbol_judge = 1; 			if (s1.empty() || s1[s1.size() - 1].symbol == '(') 				s1.push_back(item); 			else 			{ 				stack temp; 				while (!s1.empty() && s1[s1.size() - 1].symbol != '(') 				{ 					temp = s1[s1.size() - 1]; 					s2.push_back(temp); 					s1.pop_back(); 				} 				s1.push_back(item); 			} 		} 		else if (p[i] == '-') 		{ 			if (i == 0 || p[i] - 1 == '(') 			{ 				i = i + 1; 				if (p[i] >= '0'&&p[i] <= '9') 				{ 					for (int j = i; (p[j] >= '0'&&p[j] <= '9') || p[j] == '.'; j++) 					{ 						number[j - i] = p[j]; 						number[j - i + 1] = '\0'; 					} 					stack item; 					item.real = atof(number); 					item.real = item.real*(-1); 					item.image = 0; 					item.symbol_judge = 0; 					s2.push_back(item); 					i = i + strlen(number) - 1; 				} 			} 			else 			{ 				stack item; 				item.symbol = '-'; 				item.symbol_judge = 1; 				if (s1.empty()) 					s1.push_back(item); 				else 				{ 					stack temp; 					while (!s1.empty() && s1[s1.size() - 1].symbol != '(') 					{ 						temp = s1[s1.size() - 1]; 						s2.push_back(temp); 						s1.pop_back(); 					} 					s1.push_back(item); 				} 			} 		} 		else if (p[i] == '*') 		{ 			stack item; 			item.symbol = '*'; 			item.symbol_judge = 1; 			if (s1.empty()) 				s1.push_back(item); 			else 			{ 				stack temp; 				while (!s1.empty() && s1[s1.size() - 1].symbol != '(' &&s1[s1.size() - 1].symbol != '+'&&s1[s1.size() - 1].symbol != '-') 				{ 					temp = s1[s1.size() - 1]; 					s2.push_back(temp); 					s1.pop_back(); 				} 				s1.push_back(item); 			} 		} 		else if (p[i] == '/') 		{ 			stack item; 			item.symbol = '/'; 			item.symbol_judge = 1; 			if (s1.empty()) 				s1.push_back(item); 			else 			{ 				stack temp; 				while (!s1.empty() && s1[s1.size() - 1].symbol != '(' &&s1[s1.size() - 1].symbol != '+'&&s1[s1.size() - 1].symbol != '-') 				{ 					temp = s1[s1.size() - 1]; 					s2.push_back(temp); 					s1.pop_back(); 				} 				s1.push_back(item); 			} 		} 		else if (p[i] == 'i') 		{ 			if (i != 0 && p[i - 1] >= '0'&&p[i - 1] <= '9') 			{ 				stack item; 				item = s2[s2.size() - 1]; 				item.image = item.real; 				item.real = 0; 				s2.pop_back(); 				s2.push_back(item); 			} 			else 			{ 				stack item; 				item.real = 0; 				item.image = 1; 				item.symbol_judge = 0; 			} 		} 		else if (p[i] == '(') 		{ 			stack item; 			item.symbol = '('; 			item.symbol_judge = 1; 			s1.push_back(item); 		} 		else if (p[i] == ')') 		{ 			stack temp; 			while (s1[s1.size() - 1].symbol != '(') 			{ 				temp = s1[s1.size() - 1]; 				s2.push_back(temp); 				s1.pop_back(); 			} 			s1.pop_back(); 		} 		else if (p[i] == '\0') 		{ 			stack temp; 			while (!s1.empty()) 			{ 				temp = s1[s1.size() - 1]; 				s2.push_back(temp); 				s1.pop_back(); 			} 		} 	} 	stack temp; 	for (int i = 0; i < s2.size(); i++) 	{ 		temp = s2[i]; 		if (!temp.symbol_judge) 		{ 			s1.push_back(temp); 		} 		else 		{ 			stack a, b, c; 			if (temp.symbol == '+') 			{ 				a = s1[s1.size() - 1]; 				s1.pop_back(); 				b = s1[s1.size() - 1]; 				s1.pop_back(); 				c = Addplural(a, b); 				s1.push_back(c); 			} 			if (temp.symbol == '-') 			{ 				a = s1[s1.size() - 1]; 				s1.pop_back(); 				b = s1[s1.size() - 1]; 				s1.pop_back(); 				c = Subplural(b, a); 				s1.push_back(c); 			} 			if (temp.symbol == '*') 			{ 				a = s1[s1.size() - 1]; 				s1.pop_back(); 				b = s1[s1.size() - 1]; 				s1.pop_back(); 				c = Mulplural(a, b); 				s1.push_back(c); 			} 			if (temp.symbol == '/') 			{ 				a = s1[s1.size() - 1]; 				s1.pop_back(); 				b = s1[s1.size() - 1]; 				s1.pop_back(); 				c = Divplural(b, a); 				s1.push_back(c); 			} 		} 	} 	return s1[0]; } stack Addplural(stack a, stack b) { 	stack c; 	c.image = a.image + b.image; 	c.real = a.real + b.real; 	return c; } stack Subplural(stack a, stack b) { 	stack c; 	c.image = a.image - b.image; 	c.real = a.real - b.real; 	return c; } stack Mulplural(stack a, stack b) { 	stack c; 	c.real = a.real * b.real - a.image * b.image; 	c.image = a.image * b.real + a.real * b.image; 	return c; } stack Divplural(stack a, stack b) { 	stack c; 	c.image = (a.image * b.image + a.real * b.real) / (b.image * b.image + b.real * b.real); 	c.real = (a.real * b.image - a.image * b.real) / (b.image * b.image + b.real * b.real); 	return c; } void PluralRPN(char *p) { 	if (strstr(p, "arg") != NULL || strstr(p, "cjg") != NULL || strstr(p, "|") != NULL || strstr(p, "^") != NULL) 		Handlemessage(p); 	else 	{ 		double finalnumber; 		char finalchar[51]; 		stack a = RPN(p); 		finalnumber = sqrt(a.real*a.real + a.image*a.image); 		sprintf(finalchar, "%f", finalnumber); 		strcpy(p, finalchar); 	} } void CjgRPN(char *p) { 	if (strstr(p, "arg") != NULL || strstr(p, "cjg") != NULL || strstr(p, "|") != NULL || strstr(p, "^") != NULL) 		Handlemessage(p); 	else 	{ 		char realchar[51]; 		char imagechar[51]; 		stack a = RPN(p); 		sprintf(realchar, "%f", a.real); 		sprintf(imagechar, "%f", a.image); 		if (a.image < 0) 			strcat(realchar, imagechar); 		else 		{ 			strcat(realchar, "+\0"); 			strcat(realchar, imagechar); 		} 		for (int i = 0; realchar[i] != '\0'; i++) 		{ 			if (p[i] == '-'&&i != 0) 				p[i] = '+'; 			else if (p[i] == '+') 				p[i] = '-'; 		} 		p[0] = '('; 		p[1] = '\0'; 		strcat(p, realchar); 		strcat(p, "i)\0"); 	} } void PowRPN(char *p, int times) { 	if (strstr(p, "arg") != NULL || strstr(p, "cjg") != NULL || strstr(p, "|") != NULL || strstr(p, "^") != NULL) 		Handlemessage(p); 	else 	{ 		double realpow = 0, imagepow = 0; 		char realchar[51]; 		char imagechar[51]; 		stack a = RPN(p); 		for (int i = 0; i < times; i++) 		{ 			if (i == 0) 			{ 				realpow = a.real; 				imagepow = a.image; 			} 			else 			{ 				realpow = realpow * a.real - imagepow * a.image; 				imagepow = realpow * a.image + imagepow * a.real; 			} 		} 		sprintf(realchar, "%f", realpow); 		sprintf(imagechar, "%f", imagepow); 		if (imagepow < 0) 			strcat(realchar, imagechar); 		else 		{ 			strcat(realchar, "+\0"); 			strcat(realchar, imagechar); 		} 		p[0] = '('; 		p[1] = '\0'; 		strcat(p, realchar); 		strcat(p, ")\0"); 	} } void ArgRPN(char *p) { 	if (strstr(p, "arg") != NULL || strstr(p, "cjg") != NULL || strstr(p, "|") != NULL || strstr(p, "^") != NULL) 		Handlemessage(p); 	else 	{ 		stack a = RPN(p); 		double divnumber = sqrt(a.real*a.real + a.image*a.image); 		double result = acos(a.real / divnumber); 		char realchar[51]; 		sprintf(realchar, "%f", result); 		strcpy(p, realchar); 	} } void Showresult(char *p, stack a) { 	char realchar[51]; 	char imagechar[51]; 	sprintf(realchar, "%f", a.real); 	sprintf(imagechar, "%f", a.image); 	if (a.image < 0) 		strcat(realchar, imagechar); 	else 	{ 		strcat(realchar, "+\0"); 		strcat(realchar, imagechar); 	} 	p[0] = '\0'; 	strcpy(p, realchar); 	strcat(p, "i\0"); 	cout << p << endl;; } 